public class Solution {
    public boolean exist(char[][] board, String word) {
        int row=board.length;
        if(row==0)return false;
        int col=board[0].length;
        boolean[][] flags = new boolean[row][col];
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                if(dfs(board, i, j, word, 0, flags))return true;
            }
        }
        return false;
    }
    public boolean dfs(char[][] board, int x, int y, String word, int index, boolean[][] flags){
        if(index==word.length())return true;
        if(x<0||x>board.length-1||y<0||y>board[0].length-1||flags[x][y])return false;
        char target = word.charAt(index);
        if(board[x][y]!=target)return false;
        flags[x][y]=true;
        int[] dx = new int[]{0,0,1,-1};
        int[] dy = new int[]{1,-1,0,0};
        for(int i=0; i<4; i++){
            if(dfs(board, x+dx[i], y+dy[i], word, index+1, flags))return true;
        }
        flags[x][y]=false;
        return false;
    }
}
