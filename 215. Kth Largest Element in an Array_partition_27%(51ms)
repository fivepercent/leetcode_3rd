public class Solution {
    public int findKthLargest(int[] nums, int k) {
        int len=nums.length;
        return findKthLargestHelper(nums, k, 0, len-1);
        
    }
    public int findKthLargestHelper(int[] nums, int k, int start, int end){
        
        int pivot=partition(nums, start, end);
        if(pivot==k-1){
            return nums[pivot];
        }else if(pivot>k-1){
            return findKthLargestHelper(nums, k, start, pivot-1);
        }else{
            return findKthLargestHelper(nums, k, pivot+1, end);
        }
    }
    public int partition(int[] nums, int l, int r){
        int left=l;
        int right=r;
        int pivot=nums[left];
        while(left<right){
            while(left<right&&nums[right]<=pivot)right--;
            nums[left]=nums[right];
            while(left<right&&nums[left]>=pivot)left++;
            nums[right]=nums[left];
        }
        nums[left]=pivot;
        return left;
    }
}
