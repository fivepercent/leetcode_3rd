/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }    
 */
 
 /*
 public Comparator<Interval> intervalComparator =new Comparator<Interval>(){
        public int compare(Interval i1, Interval i2){
            return i1.start-i2.start;
        }
    };
 */
public class Solution {
    public class intervalComparator implements Comparator<Interval>{
        public int compare(Interval i1, Interval i2){
            return i1.start-i2.start;
        }
    }
    public List<Interval> merge(List<Interval> intervals) {
        int size = intervals.size();
        List<Interval> res = new ArrayList<Interval>();
        if(size==0)return res;
        Collections.sort(intervals, new intervalComparator());
        Interval cur = intervals.get(0);
        for(int i=1; i<size; i++){
            Interval next = intervals.get(i);
            if(next.start<=cur.end){
                cur.start=Math.min(cur.start, next.start);
                cur.end=Math.max(cur.end, next.end);
            }else{
                res.add(cur);
                cur=next;
            }
        }
        res.add(cur);
        return res;
    }
}
