public class Solution {
    public String processString(String s){
        int len =s.length();
        StringBuilder sb = new StringBuilder();
        sb.append("#");
        for(int i=0; i<len; i++){
            sb.append(s.charAt(i));
            sb.append("#");
        }
        return sb.toString();
    }
    public String longestPalindrome(String s) {
        String str = processString(s);
        int len = str.length();
        int[] P = new int[len];
        int C=0;
        int R=0;
        for(int i=1; i<len-1; i++){
            int i_mirror = C*2-i;
            P[i] = R>i ? Math.min(P[i_mirror], R-i):0;
            while(i+P[i]+1<len&&i-P[i]-1>=0&&str.charAt(i+P[i]+1)==str.charAt(i-P[i]-1))P[i]++;
            
            if(i+P[i]>R){
                R=i+P[i];
                C=i;
            }
        }
        int center=0;
        int maxLen=0;
        for(int i=1; i<len-1; i++){
            if(P[i]>maxLen){
                maxLen=P[i];
                center=i;
            }
        }
        return s.substring((center-maxLen)/2, (center+maxLen)/2);
    }
}
