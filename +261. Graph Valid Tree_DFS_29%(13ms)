public class Solution {
    public boolean validTree(int n, int[][] edges) {
        HashMap<Integer, List<Integer>> map = new HashMap<>();
        for(int i=0; i<n; i++){
            map.put(i, new ArrayList<Integer>());
        }
        for(int i=0; i<edges.length; i++){
            map.get(edges[i][0]).add(edges[i][1]);
            map.get(edges[i][1]).add(edges[i][0]);
        }
        HashSet<Integer> visited = new HashSet<>();
        if(!validTreeHelper(0, -1, map, visited))return false;
        return n==visited.size();
    }
    public boolean validTreeHelper(int cur, int parent, HashMap<Integer, List<Integer>> map, HashSet<Integer> visited){
        if(visited.contains(cur))return false;
        visited.add(cur);
        for(Integer nb: map.get(cur)){
            if(nb!=parent&&!validTreeHelper(nb, cur, map, visited)){
                return false;
            }
        }
        return true;
    }
}
