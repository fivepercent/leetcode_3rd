public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int len1 = nums1.length;
        int len2 = nums2.length;
        int mid = (len1+len2)/2;
        if((len1+len2)%2==1){
            return (double)findKthNumber(nums1, 0, len1, nums2, 0, len2, mid+1);
        }else{
            return (findKthNumber(nums1, 0, len1, nums2, 0, len2, mid)+findKthNumber(nums1, 0, len1, nums2, 0, len2, mid+1))/2.0;
        }
    }
    public int findKthNumber(int[] nums1, int start1, int len1, int[] nums2, int start2, int len2, int k){
        if(len1==0&&start2+k-1<len2){
            return nums2[start2+k-1];
        }else if(len2==0&&start1+k-1<len1){
            return nums1[start1+k-1];
        }
        if(k==1)return Math.min(start1<len1?nums1[start1]:Integer.MAX_VALUE, start2<len2?nums2[start2]:Integer.MAX_VALUE);
        int n1 = start1+k/2-1<len1?nums1[start1+k/2-1]:Integer.MAX_VALUE;
        int n2 = start2+k/2-1<len2?nums2[start2+k/2-1]:Integer.MAX_VALUE;
        if(n1<n2){
            return findKthNumber(nums1, start1+k/2, len1, nums2, start2, len2, k-k/2);
        }else{
            return findKthNumber(nums1, start1, len1, nums2, start2+k/2, len2, k-k/2);
        }
    }
}
