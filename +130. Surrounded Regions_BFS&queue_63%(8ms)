public class Solution {
    public void solve(char[][] board) {
        int row = board.length;
        if(row==0)return;
        int col = board[0].length;
        Queue<Integer> queue = new LinkedList<Integer>();
        int[] dx = new int[]{0,0,1,-1};
        int[] dy = new int[]{1,-1,0,0};
        for(int j=0; j<col; j++){
            enqueue(board, 0, j, queue);
            enqueue(board, row-1, j, queue);
        }
        for(int i=1; i<row-1; i++){
            enqueue(board, i, 0, queue);
            enqueue(board, i, col-1, queue);
        }
        while(!queue.isEmpty()){
            int cur=queue.poll();
            int curx=cur/col;
            int cury=cur%col;
            for(int i=0; i<4; i++){
                enqueue(board, curx+dx[i], cury+dy[i], queue);
            }
        }
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                if(board[i][j]=='O'){
                    board[i][j]='X';
                }else if(board[i][j]=='#'){
                    board[i][j]='O';
                }
            }
        }
    }
    public void enqueue(char[][] board, int x, int y, Queue<Integer> queue){
        if(x<0||x>=board.length||y<0||y>=board[0].length)return;
        if(board[x][y]!='O')return;
        board[x][y]='#';
        queue.offer(x*board[0].length+y);
    }
}
