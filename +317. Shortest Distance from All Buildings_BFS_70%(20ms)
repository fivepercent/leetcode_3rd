public class Solution {
    public class point{
        int x;
        int y;
        public point(int x, int y){
            this.x=x;
            this.y=y;
        }
    }
    public int shortestDistance(int[][] grid) {
        int row=grid.length;
        if(row==0)return -1;
        int col=grid[0].length;
        ArrayList<point> buildings = new ArrayList<>();
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                if(grid[i][j]==1){
                    buildings.add(new point(i, j));
                }
            }
        }
        int[] dx = new int[]{0, 0, 1, -1};
        int[] dy = new int[]{1, -1, 0, 0};
        int[][] sum = new int[row][col];
        int val=0;
        for(int k=0; k<buildings.size(); k++){
            point building = buildings.get(k);
            int[][] distance = new int[row][col];
            Queue<point> queue = new LinkedList<point>();
            queue.offer(building);
            while(!queue.isEmpty()){
                point cur = queue.poll();
                for(int i=0; i<4; i++){
                    int x=cur.x+dx[i];
                    int y=cur.y+dy[i];
                    if(x>=0&&x<row&&y>=0&&y<col&&grid[x][y]==val){
                        grid[x][y]--;
                        distance[x][y]=distance[cur.x][cur.y]+1;
                        sum[x][y]+=distance[x][y];
                        queue.offer(new point(x, y));
                    }
                }
            }
            val--;
        }
        int res=Integer.MAX_VALUE;
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                if(grid[i][j]!=1&&grid[i][j]!=2&&grid[i][j]==val){
                    if(sum[i][j]<res)res=sum[i][j];
                }
                
            }
        }
        return res==Integer.MAX_VALUE?-1:res;
    }
}
