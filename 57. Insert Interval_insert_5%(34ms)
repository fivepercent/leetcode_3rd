/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public class intervalComparator implements Comparator<Interval>{
        public int compare(Interval i1, Interval i2){
            return i1.start-i2.start;
        }
    }
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        int index=0;
        int position=0;
        while(index<intervals.size()){
            Interval cur = intervals.get(index);
            if(cur.end<newInterval.start){
                position++;
            }else if(cur.start>newInterval.end){
                break;
            }else{
                newInterval.start=Math.min(newInterval.start, cur.start);
                newInterval.end=Math.max(newInterval.end, cur.end);
                intervals.remove(index);
                index--;
            }
            index++;
        }
        intervals.add(position, newInterval);
        return intervals;
    }
}
