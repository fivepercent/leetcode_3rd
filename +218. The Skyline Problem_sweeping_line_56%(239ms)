public class Solution {
    public class point{
        int pos;
        int height;
        public point(int pos, int height){
            this.pos=pos;
            this.height=height;
        }
    }
    public class timingComparator implements Comparator<point>{
        public int compare(point p1, point p2){
            if(p1.pos!=p2.pos)return p1.pos-p2.pos;
            else return p2.height-p1.height;
        }
    }
    public class maxComparator implements Comparator<Integer>{
        public int compare(Integer n1, Integer n2){
            return n2-n1;
        }
    }
    public List<int[]> getSkyline(int[][] buildings) {
        int len=buildings.length;
        List<int[]> res = new ArrayList<int[]>();
        List<point> timings = new ArrayList<point>();
        for(int i=0; i<len; i++){
            timings.add(new point(buildings[i][0], buildings[i][2]));
            timings.add(new point(buildings[i][1], -buildings[i][2]));
        }
        Collections.sort(timings, new timingComparator());
        PriorityQueue<Integer> heap = new PriorityQueue<Integer>(new maxComparator());
        heap.offer(0);
        int lastHeight=0;
        for(int i=0; i<timings.size(); i++){
            point cur = timings.get(i);
            if(cur.height>0){
                heap.offer(cur.height);
            }else{
                heap.remove(-cur.height);
            }
            int newHeight=heap.peek();
            if(newHeight!=lastHeight)res.add(new int[]{cur.pos, newHeight});
            lastHeight=newHeight;
        }
        return res;
    }
}
