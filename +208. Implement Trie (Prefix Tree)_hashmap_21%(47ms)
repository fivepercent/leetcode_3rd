class TrieNode {
    // Initialize your data structure here.
    Map<Character, TrieNode> children = new HashMap<Character, TrieNode>();
    boolean isEnd;
    char c;
    public TrieNode(){
        isEnd=false;
    }
}

public class Trie {
    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    public void insert(String word) {
        int len = word.length();
        TrieNode node = root;
        for(int i=0; i<len; i++){
            char cur = word.charAt(i);
            if(!node.children.containsKey(cur)){
                TrieNode newNode = new TrieNode();
                newNode.c=cur;
                node.children.put(cur, newNode);
            }
            node = node.children.get(cur);
            if(i==len-1)node.isEnd=true;
        }
    }

    // Returns if the word is in the trie.
    public boolean search(String word) {
        int len = word.length();
        TrieNode node = root;
        for(int i=0; i<len; i++){
            char cur = word.charAt(i);
            if(!node.children.containsKey(cur))return false;
            node=node.children.get(cur);
        }
        return node.isEnd;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public boolean startsWith(String prefix) {
        int len = prefix.length();
        TrieNode node = root;
        for(int i=0; i<len; i++){
            char cur = prefix.charAt(i);
            if(!node.children.containsKey(cur))return false;
            node=node.children.get(cur);
        }
        return true;
    }
    
    public void delete(String word){
        if(!search(word))return;
        deleteChar(word, 0, root);
        
    }
    public boolean deleteChar(String word, int index, TrieNode node){
        if(index==word.length()){
            node.isEnd=false;
            return node.children.size()==0;
        }
        char cur = word.charAt(index);
        TrieNode next = node.children.get(cur);
        if(deleteChar(word, index, next)){
            node.children.remove(cur);
        }
        return node.children.size()==0;
    }
}

// Your Trie object will be instantiated and called as such:
// Trie trie = new Trie();
// trie.insert("somestring");
// trie.search("key");
