public class Solution {
    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        List<List<String>> result = new ArrayList<List<String>>();
        if(!wordList.contains(endWord)) return result;
        Map<String, List<String>> map = new HashMap<String, List<String>>();
        Map<String, Integer> distances = new HashMap<String, Integer>();
        bfs(beginWord, wordList, map, distances);
        List<String> ladder = new ArrayList<String>();
        ladder.add(beginWord);
        dfs(beginWord, endWord, map, distances, ladder, result);
        return result;
    }
    public void bfs(String beginWord, List<String> wordList, Map<String, List<String>> map, Map<String, Integer> distances){
        int len = beginWord.length();
        Queue<String> queue = new LinkedList<String>();
        queue.offer(beginWord);
        distances.put(beginWord, 1);
        HashSet<String> dictionary = new HashSet<String>();
        dictionary.addAll(wordList);
        while(!queue.isEmpty()){
            String cur = queue.poll();
            //System.out.println(cur+":");
            int distance = distances.get(cur);
            List<String> nbs = new ArrayList<String>();
            char[] cc = cur.toCharArray();
            for(int i=0; i<len; i++){
                char orig = cc[i];
                for(int j=0; j<26; j++){
                    cc[i]=(char)('a'+j);
                    if(cc[i]==orig) continue;
                    String nb = String.valueOf(cc);
                    if(dictionary.contains(nb)){
                        //System.out.println(nb);
                        if(!distances.containsKey(nb)){
                            distances.put(nb, distance+1);
                            queue.offer(nb);
                        }
                        if(distances.get(nb)==distance+1) {
                            nbs.add(nb);
                        }
                    }
                }
                cc[i]=orig;
            }
            map.put(cur, nbs);
        }
    }
    public void dfs(String current, String endWord, Map<String, List<String>> map, Map<String, Integer> distances, List<String> ladder, List<List<String>> result){
        
        if(current.equals(endWord)){
            List<String> list = new ArrayList<String>(ladder);
            result.add(list);
            return;
        }
        List<String> nbs = map.get(current);
        int distance = distances.get(current);
        for(String nb: nbs){
            if(distances.containsKey(nb)&&distances.get(nb)==distance+1){
                ladder.add(nb);
                dfs(nb, endWord, map, distances, ladder, result);
                ladder.remove(ladder.size()-1);
            }
        }
    }
}
