public class Solution {
    public List<String> generatePalindromes(String s) {
        int len =s.length();
        List<String> res = new ArrayList<String>();
        int[] table = new int[256];
        StringBuilder sb = new StringBuilder();
        for(int i=0; i<len; i++){
            int cur = (int)s.charAt(i);
            table[cur]++;
        }
        String center="";
        for(int i=0; i<256; i++){
            for(int j=0; j<table[i]/2; j++){
                sb.append((char)i);
            }
            if(table[i]%2==1){
                if(center.length()!=0){
                    return res;
                }else{
                    center+=(char)i;
                }
            }
        }
        String half=sb.toString();
        getAllPalindromes(half, center, "", res, new boolean[half.length()]);
        return res;
    }
    public void getAllPalindromes(String half, String center, String permutation, List<String> res, boolean[] visited){
        int len = half.length();
        if(permutation.length()==len){
            String right =new StringBuilder(permutation).reverse().toString();
            res.add(permutation+center+right);
            return;
        }
        for(int i=0; i<len; i++){
            if(visited[i])continue;
            char cur=half.charAt(i);
            if(i>0&&cur==half.charAt(i-1)&&!visited[i-1])continue;
            visited[i]=true;
            getAllPalindromes(half, center, permutation+cur, res, visited);
            visited[i]=false;
        }
    }
}
