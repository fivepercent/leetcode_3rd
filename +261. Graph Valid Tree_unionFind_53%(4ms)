public class Solution {
    public class unionFind{
        HashMap<Integer, Integer> father = new HashMap<>();
        public unionFind(int n){
            for(int i=0; i<n; i++){
                father.put(i, i);
            }
        }
        
        public int compressed_find(int x){
            int parent = father.get(x);
            while(parent!=father.get(parent)){
                parent=father.get(parent);
            }
            int fa=x;
            while(fa!=parent){
                int temp=father.get(fa);
                father.put(fa, parent);
                fa=temp;
            }
            return parent;
        }
        public void union(int x, int y){
            int x_fa=compressed_find(x);
            int y_fa=compressed_find(y);
            if(x_fa!=y_fa){
                father.put(y_fa, x_fa);
            }
        }
    }
    public boolean validTree(int n, int[][] edges) {
        if(n-1!=edges.length)return false;
        unionFind uf = new unionFind(n);
        for(int i=0; i<edges.length; i++){
            if(uf.compressed_find(edges[i][0])==uf.compressed_find(edges[i][1]))return false;
            uf.union(edges[i][0], edges[i][1]);
        }
        return true;
    }
}
